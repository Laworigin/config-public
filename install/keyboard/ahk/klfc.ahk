; NOTE(infokiller): this was generated from klfc 1.5.5 and then to remove the
; parts that handle dead keys which are 4K+ lines of code and I don't use.
; Command line used:

; klfc ~/install/keyboard/klfc/qwerty.json ~/install/keyboard/klfc/extend.json --ahk klfc_ahk_output

; Generated by KLFC 1.5.5 and then edited to remove dead keys handling.
; https://github.com/39aldo39/klfc

#MaxHotkeysPerInterval 200
#MaxThreadsPerHotkey 10

*SC03a::Extend := true ; QWERTY CapsLock
*SC03a Up::Extend := false
*SC029::Send {Blind}{VKc0SC029 DownR} ; QWERTY ~: ~
*SC029 up::Send {Blind}{VKc0SC029 Up}
*SC002::Send {Blind}{VK31SC002 DownR} ; QWERTY 1: 1
*SC002 up::Send {Blind}{VK31SC002 Up}
*SC003::Send {Blind}{VK32SC003 DownR} ; QWERTY 2: 2
*SC003 up::Send {Blind}{VK32SC003 Up}
*SC004::Send {Blind}{VK33SC004 DownR} ; QWERTY 3: 3
*SC004 up::Send {Blind}{VK33SC004 Up}
*SC005::Send {Blind}{VK34SC005 DownR} ; QWERTY 4: 4
*SC005 up::Send {Blind}{VK34SC005 Up}
*SC006::Send {Blind}{VK35SC006 DownR} ; QWERTY 5: 5
*SC006 up::Send {Blind}{VK35SC006 Up}
*SC007::Send {Blind}{VK36SC007 DownR} ; QWERTY 6: 6
*SC007 up::Send {Blind}{VK36SC007 Up}
*SC008::Send {Blind}{VK37SC008 DownR} ; QWERTY 7: 7
*SC008 up::Send {Blind}{VK37SC008 Up}
*SC009::Send {Blind}{VK38SC009 DownR} ; QWERTY 8: 8
*SC009 up::Send {Blind}{VK38SC009 Up}
*SC00a::Send {Blind}{VK39SC00a DownR} ; QWERTY 9: 9
*SC00a up::Send {Blind}{VK39SC00a Up}
*SC00b::Send {Blind}{VK30SC00b DownR} ; QWERTY 0: 0
*SC00b up::Send {Blind}{VK30SC00b Up}
*SC00c::Send {Blind}{VKbdSC00c DownR} ; QWERTY -: -
*SC00c up::Send {Blind}{VKbdSC00c Up}
*SC00d::Send {Blind}{VKbbSC00d DownR} ; QWERTY +: +
*SC00d up::Send {Blind}{VKbbSC00d Up}
*SC010::Send {Blind}{VK51SC010 DownR} ; QWERTY Q: Q
*SC010 up::Send {Blind}{VK51SC010 Up}
*SC011::Send {Blind}{VK57SC011 DownR} ; QWERTY W: W
*SC011 up::Send {Blind}{VK57SC011 Up}
*SC012::Send {Blind}{VK45SC012 DownR} ; QWERTY E: E
*SC012 up::Send {Blind}{VK45SC012 Up}
*SC013::Send {Blind}{VK52SC013 DownR} ; QWERTY R: R
*SC013 up::Send {Blind}{VK52SC013 Up}
*SC014::Send {Blind}{VK54SC014 DownR} ; QWERTY T: T
*SC014 up::Send {Blind}{VK54SC014 Up}
*SC015::Send {Blind}{VK59SC015 DownR} ; QWERTY Y: Y
*SC015 up::Send {Blind}{VK59SC015 Up}
*SC016::Send {Blind}{VK55SC016 DownR} ; QWERTY U: U
*SC016 up::Send {Blind}{VK55SC016 Up}
*SC017::Send {Blind}{VK49SC017 DownR} ; QWERTY I: I
*SC017 up::Send {Blind}{VK49SC017 Up}
*SC018::Send {Blind}{VK4fSC018 DownR} ; QWERTY O: O
*SC018 up::Send {Blind}{VK4fSC018 Up}
*SC019::Send {Blind}{VK50SC019 DownR} ; QWERTY P: P
*SC019 up::Send {Blind}{VK50SC019 Up}
*SC01a::Send {Blind}{VKdbSC01a DownR} ; QWERTY [: [
*SC01a up::Send {Blind}{VKdbSC01a Up}
*SC01b::Send {Blind}{VKddSC01b DownR} ; QWERTY ]: ]
*SC01b up::Send {Blind}{VKddSC01b Up}
*SC02b::Send {Blind}{VKdcSC02b DownR} ; QWERTY \: \
*SC02b up::Send {Blind}{VKdcSC02b Up}
*SC01e::Send {Blind}{VK41SC01e DownR} ; QWERTY A: A
*SC01e up::Send {Blind}{VK41SC01e Up}
*SC01f::Send {Blind}{VK53SC01f DownR} ; QWERTY S: S
*SC01f up::Send {Blind}{VK53SC01f Up}
*SC020::Send {Blind}{VK44SC020 DownR} ; QWERTY D: D
*SC020 up::Send {Blind}{VK44SC020 Up}
*SC021::Send {Blind}{VK46SC021 DownR} ; QWERTY F: F
*SC021 up::Send {Blind}{VK46SC021 Up}
*SC022::Send {Blind}{VK47SC022 DownR} ; QWERTY G: G
*SC022 up::Send {Blind}{VK47SC022 Up}
*SC023::Send {Blind}{VK48SC023 DownR} ; QWERTY H: H
*SC023 up::Send {Blind}{VK48SC023 Up}
*SC024::Send {Blind}{VK4aSC024 DownR} ; QWERTY J: J
*SC024 up::Send {Blind}{VK4aSC024 Up}
*SC025::Send {Blind}{VK4bSC025 DownR} ; QWERTY K: K
*SC025 up::Send {Blind}{VK4bSC025 Up}
*SC026::Send {Blind}{VK4cSC026 DownR} ; QWERTY L: L
*SC026 up::Send {Blind}{VK4cSC026 Up}
*SC027::Send {Blind}{VKbaSC027 DownR} ; QWERTY ;: ;
*SC027 up::Send {Blind}{VKbaSC027 Up}
*SC028::Send {Blind}{VKdeSC028 DownR} ; QWERTY ': '
*SC028 up::Send {Blind}{VKdeSC028 Up}
*SC02c::Send {Blind}{VK5aSC02c DownR} ; QWERTY Z: Z
*SC02c up::Send {Blind}{VK5aSC02c Up}
*SC02d::Send {Blind}{VK58SC02d DownR} ; QWERTY X: X
*SC02d up::Send {Blind}{VK58SC02d Up}
*SC02e::Send {Blind}{VK43SC02e DownR} ; QWERTY C: C
*SC02e up::Send {Blind}{VK43SC02e Up}
*SC02f::Send {Blind}{VK56SC02f DownR} ; QWERTY V: V
*SC02f up::Send {Blind}{VK56SC02f Up}
*SC030::Send {Blind}{VK42SC030 DownR} ; QWERTY B: B
*SC030 up::Send {Blind}{VK42SC030 Up}
*SC031::Send {Blind}{VK4eSC031 DownR} ; QWERTY N: N
*SC031 up::Send {Blind}{VK4eSC031 Up}
*SC032::Send {Blind}{VK4dSC032 DownR} ; QWERTY M: M
*SC032 up::Send {Blind}{VK4dSC032 Up}
*SC033::Send {Blind}{VKbcSC033 DownR} ; QWERTY ,: ,
*SC033 up::Send {Blind}{VKbcSC033 Up}
*SC034::Send {Blind}{VKbeSC034 DownR} ; QWERTY .: .
*SC034 up::Send {Blind}{VKbeSC034 Up}
*SC035::Send {Blind}{VKbfSC035 DownR} ; QWERTY /: /
*SC035 up::Send {Blind}{VKbfSC035 Up}
*SC001::Send {Blind}{VK1bSC001 DownR} ; QWERTY Escape: Escape
*SC001 up::Send {Blind}{VK1bSC001 Up}
*SC039::Send {Blind}{VK20SC039 DownR} ; QWERTY Space: Space
*SC039 up::Send {Blind}{VK20SC039 Up}

; QWERTY ~
#if
SC029::Send {Blind}{U+0060} ; `
+SC029::Send {Blind}{U+007e} ; ~

; QWERTY 1
#if not Extend
SC002::Send {Blind}{U+0031} ; 1
+SC002::Send {Blind}{U+0021} ; !
#if Extend
*SC002::Send {Blind}{F1}

; QWERTY 2
#if not Extend
SC003::Send {Blind}{U+0032} ; 2
+SC003::Send {Blind}{U+0040} ; @
#if Extend
*SC003::Send {Blind}{F2}

; QWERTY 3
#if not Extend
SC004::Send {Blind}{U+0033} ; 3
+SC004::Send {Blind}{U+0023} ; #
#if Extend
*SC004::Send {Blind}{F3}

; QWERTY 4
#if not Extend
SC005::Send {Blind}{U+0034} ; 4
+SC005::Send {Blind}{U+0024} ; $
#if Extend
*SC005::Send {Blind}{F4}

; QWERTY 5
#if not Extend
SC006::Send {Blind}{U+0035} ; 5
+SC006::Send {Blind}{U+0025} ; %
#if Extend
*SC006::Send {Blind}{F5}

; QWERTY 6
#if not Extend
SC007::Send {Blind}{U+0036} ; 6
+SC007::Send {Blind}{U+005e} ; ^
#if Extend
*SC007::Send {Blind}{F6}

; QWERTY 7
#if not Extend
SC008::Send {Blind}{U+0037} ; 7
+SC008::Send {Blind}{U+0026} ; &
#if Extend
*SC008::Send {Blind}{F7}

; QWERTY 8
#if not Extend
SC009::Send {Blind}{U+0038} ; 8
+SC009::Send {Blind}{U+002a} ; *
#if Extend
*SC009::Send {Blind}{F8}

; QWERTY 9
#if not Extend
SC00a::Send {Blind}{U+0039} ; 9
+SC00a::Send {Blind}{U+0028} ; (
#if Extend
*SC00a::Send {Blind}{F9}

; QWERTY 0
#if not Extend
SC00b::Send {Blind}{U+0030} ; 0
+SC00b::Send {Blind}{U+0029} ; )
#if Extend
*SC00b::Send {Blind}{F10}

; QWERTY -
#if not Extend
SC00c::Send {Blind}{U+002d} ; -
+SC00c::Send {Blind}{U+005f} ; _
#if Extend
*SC00c::Send {Blind}{F11}

; QWERTY +
#if not Extend
SC00d::Send {Blind}{U+003d} ; =
+SC00d::Send {Blind}{U+002b} ; +
#if Extend
*SC00d::Send {Blind}{F12}

; QWERTY Q
#if not Extend
SC010::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0071} ; q
} else {
  Send {Blind}{U+0051} ; Q
}
Return
+SC010::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0051} ; Q
} else {
  Send {Blind}{U+0071} ; q
}
Return
#if Extend
*SC010::Send {Blind}{Esc}

; QWERTY W
#if not Extend
SC011::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0077} ; w
} else {
  Send {Blind}{U+0057} ; W
}
Return
+SC011::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0057} ; W
} else {
  Send {Blind}{U+0077} ; w
}
Return
#if Extend
*SC011::Send {Blind}^{VK25SC14b}

; QWERTY E
#if not Extend
SC012::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0065} ; e
} else {
  Send {Blind}{U+0045} ; E
}
Return
+SC012::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0045} ; E
} else {
  Send {Blind}{U+0065} ; e
}
Return
#if Extend
*SC012::Send {Blind}^{VK27SC14d}

; QWERTY R
#if
SC013::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0072} ; r
} else {
  Send {Blind}{U+0052} ; R
}
Return
+SC013::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0052} ; R
} else {
  Send {Blind}{U+0072} ; r
}
Return

; QWERTY T
#if not Extend
SC014::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0074} ; t
} else {
  Send {Blind}{U+0054} ; T
}
Return
+SC014::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0054} ; T
} else {
  Send {Blind}{U+0074} ; t
}
Return
#if Extend
*SC014::Send {Blind}^{VK54SC014}

; QWERTY Y
#if not Extend
SC015::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0079} ; y
} else {
  Send {Blind}{U+0059} ; Y
}
Return
+SC015::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0059} ; Y
} else {
  Send {Blind}{U+0079} ; y
}
Return
#if Extend
*SC015::Send {Blind}{PgUp}

; QWERTY U
#if not Extend
SC016::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0075} ; u
} else {
  Send {Blind}{U+0055} ; U
}
Return
+SC016::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0055} ; U
} else {
  Send {Blind}{U+0075} ; u
}
Return
#if Extend
*SC016::Send {Blind}^{VK5aSC02c}
!SC016::Send +^{VK5aSC02c}

; QWERTY I
#if not Extend
SC017::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0069} ; i
} else {
  Send {Blind}{U+0049} ; I
}
Return
+SC017::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0049} ; I
} else {
  Send {Blind}{U+0069} ; i
}
Return
#if Extend
*SC017::Send {Blind}{Up}
!SC017::Send {PgUp}

; QWERTY O
#if
SC018::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006f} ; o
} else {
  Send {Blind}{U+004f} ; O
}
Return
+SC018::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004f} ; O
} else {
  Send {Blind}{U+006f} ; o
}
Return

; QWERTY P
#if
SC019::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0070} ; p
} else {
  Send {Blind}{U+0050} ; P
}
Return
+SC019::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0050} ; P
} else {
  Send {Blind}{U+0070} ; p
}
Return

; QWERTY [
#if
SC01a::Send {Blind}{U+005b} ; [
+SC01a::Send {Blind}{U+007b} ; {

; QWERTY ]
#if
SC01b::Send {Blind}{U+005d} ; ]
+SC01b::Send {Blind}{U+007d} ; }

; QWERTY \
#if
SC02b::Send {Blind}{U+005c} ; \
+SC02b::Send {Blind}{U+007c} ; |

; QWERTY A
#if
SC01e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0061} ; a
} else {
  Send {Blind}{U+0041} ; A
}
Return
+SC01e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0041} ; A
} else {
  Send {Blind}{U+0061} ; a
}
Return

; QWERTY S
#if
SC01f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0073} ; s
} else {
  Send {Blind}{U+0053} ; S
}
Return
+SC01f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0053} ; S
} else {
  Send {Blind}{U+0073} ; s
}
Return

; QWERTY D
#if not Extend
SC020::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0064} ; d
} else {
  Send {Blind}{U+0044} ; D
}
Return
+SC020::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0044} ; D
} else {
  Send {Blind}{U+0064} ; d
}
Return
#if Extend
*SC020::Send {Blind}^{VK8SC00e}
!SC020::Send ^{VK2eSC153}

; QWERTY F
#if not Extend
SC021::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0066} ; f
} else {
  Send {Blind}{U+0046} ; F
}
Return
+SC021::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0046} ; F
} else {
  Send {Blind}{U+0066} ; f
}
Return
#if Extend
*SC021::Send {Blind}^{VK46SC021}

; QWERTY G
#if
SC022::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0067} ; g
} else {
  Send {Blind}{U+0047} ; G
}
Return
+SC022::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0047} ; G
} else {
  Send {Blind}{U+0067} ; g
}
Return

; QWERTY H
#if not Extend
SC023::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0068} ; h
} else {
  Send {Blind}{U+0048} ; H
}
Return
+SC023::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0048} ; H
} else {
  Send {Blind}{U+0068} ; h
}
Return
#if Extend
*SC023::Send {Blind}{PgDn}

; QWERTY J
#if not Extend
SC024::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006a} ; j
} else {
  Send {Blind}{U+004a} ; J
}
Return
+SC024::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004a} ; J
} else {
  Send {Blind}{U+006a} ; j
}
Return
#if Extend
*SC024::Send {Blind}{Left}
!SC024::Send {Home}

; QWERTY K
#if not Extend
SC025::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006b} ; k
} else {
  Send {Blind}{U+004b} ; K
}
Return
+SC025::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004b} ; K
} else {
  Send {Blind}{U+006b} ; k
}
Return
#if Extend
*SC025::Send {Blind}{Down}
!SC025::Send {PgDn}

; QWERTY L
#if not Extend
SC026::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006c} ; l
} else {
  Send {Blind}{U+004c} ; L
}
Return
+SC026::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004c} ; L
} else {
  Send {Blind}{U+006c} ; l
}
Return
#if Extend
*SC026::Send {Blind}{Right}
!SC026::Send {End}

; QWERTY ;
#if
SC027::Send {Blind}{U+003b} ; ;
+SC027::Send {Blind}{U+003a} ; :

; QWERTY '
#if not Extend
SC028::Send {Blind}{U+0027} ; '
+SC028::Send {Blind}{U+0022} ; "
#if Extend
*SC028::Send {Blind}{AppsKey}

; QWERTY Z
#if
SC02c::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+007a} ; z
} else {
  Send {Blind}{U+005a} ; Z
}
Return
+SC02c::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+005a} ; Z
} else {
  Send {Blind}{U+007a} ; z
}
Return

; QWERTY X
#if not Extend
SC02d::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0078} ; x
} else {
  Send {Blind}{U+0058} ; X
}
Return
+SC02d::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0058} ; X
} else {
  Send {Blind}{U+0078} ; x
}
Return
#if Extend
*SC02d::Send {Blind}{BackSpace}
!SC02d::Send {Del}

; QWERTY C
#if not Extend
SC02e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0063} ; c
} else {
  Send {Blind}{U+0043} ; C
}
Return
+SC02e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0043} ; C
} else {
  Send {Blind}{U+0063} ; c
}
Return
#if Extend
*SC02e::Send {Blind}^{VK43SC02e}

; QWERTY V
#if not Extend
SC02f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0076} ; v
} else {
  Send {Blind}{U+0056} ; V
}
Return
+SC02f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0056} ; V
} else {
  Send {Blind}{U+0076} ; v
}
Return
#if Extend
*SC02f::Send {Blind}^{VK56SC02f}

; QWERTY B
#if
SC030::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0062} ; b
} else {
  Send {Blind}{U+0042} ; B
}
Return
+SC030::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0042} ; B
} else {
  Send {Blind}{U+0062} ; b
}
Return

; QWERTY N
#if
SC031::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006e} ; n
} else {
  Send {Blind}{U+004e} ; N
}
Return
+SC031::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004e} ; N
} else {
  Send {Blind}{U+006e} ; n
}
Return

; QWERTY M
#if
SC032::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006d} ; m
} else {
  Send {Blind}{U+004d} ; M
}
Return
+SC032::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004d} ; M
} else {
  Send {Blind}{U+006d} ; m
}
Return

; QWERTY ,
#if
SC033::Send {Blind}{U+002c} ; ,
+SC033::Send {Blind}{U+003c} ; <

; QWERTY .
#if
SC034::Send {Blind}{U+002e} ; .
+SC034::Send {Blind}{U+003e} ; >

; QWERTY /
#if
SC035::Send {Blind}{U+002f} ; /
+SC035::Send {Blind}{U+003f} ; ?

; QWERTY Escape
#if Extend
*SC001::Send {Blind}{CapsLock}

; QWERTY Space
#if Extend
*SC039::Send {Blind}{Enter}

