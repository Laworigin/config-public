#!/usr/bin/env bash

# NOTE: There are discrepancies between `rg --files` and `git ls-files`:
#
# 1. `rg --files` doesn't list files in ignore files that are in the repo
# 2. `rg --files` doesn't list symbolic links files
# 3. `git ls-files` doesn't list untracked files
#
# I'd like to search files in (1) and (3) by default. (2) is not
# important since the original files will be searched anyway (and possibly it
# will also cause duplicate results?).

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

# shellcheck disable=SC2155
readonly REPO_ROOT="$([[ ${CONFIG_GET_ROOT:-0} == 1 ]] && config-repo-root "${BASH_SOURCE[0]}" || echo "${HOME}")"
readonly PUBLIC_CONFIG_GIT_DIR="${HOME}/.local/var/git_dirs/config-public"
readonly PRIVATE_CONFIG_GIT_DIR="${HOME}/.local/var/git_dirs/config-private"

_command_exists() {
  command -v -- "$1" &> /dev/null
}

_run_git-list-files() {
  local repo_root
  repo_root="$(git rev-parse --show-toplevel 2> /dev/null)" || return
  # If we're in an ignored directory, use "regular" search. Note that both rg
  # and fd will list ignored files in this case.
  if git check-ignore -q .; then
    _run_alternative_tool
    return
  fi
  if [[ "${repo_root}" == "${HOME}" ]]; then
    GIT_DIR="${PUBLIC_CONFIG_GIT_DIR}" git-list-files
    GIT_DIR="${PRIVATE_CONFIG_GIT_DIR}" git-list-files
  else
    git-list-files
  fi
}

_run_alternative_tool() {
  if _command_exists rg; then
    rg --files
  elif _command_exists fd; then
    fd --type f
  elif _command_exists find; then
    find . -type f
  else
    return 1
  fi
}

main() {
  {
    if _command_exists git-list-files; then
      _run_git-list-files
    else
      _run_alternative_tool
    fi
  } | "${REPO_ROOT}/.my_scripts/util/dedup-resolved-paths"
}

main "$@"
