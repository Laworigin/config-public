#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

_ORDERED_DIFFERS=(delta diff-so-fancy icdiff diff)

_command_exists() {
  command -v -- "$1" &> /dev/null
}

# git-diff doesn't work with process substitution [1] so we're copying the
# pipe to a temporary file.
# [1] https://github.com/dandavison/delta/issues/666
_run_git_diff() {
  local tmpdir
  tmpdir="$(mktemp -d -t 'sensible_diff.XXXXXX')"
  # NOTE: The path variable in trap must be expanded here because it may not
  # be defined when the trap is ran.
  # shellcheck disable=SC2064
  trap "rm -rf -- '${tmpdir}' &> /dev/null || true" EXIT ERR INT HUP TERM
  local f files=()
  for ((i = 1; i <= $#; i++)); do
    f="${!i}"
    if [[ -p "${f}" ]]; then
      local tmpfile="${tmpdir}/arg_${i}"
      cat -- "${f}" >| "${tmpfile}"
      files+=("${tmpfile}")
    else
      files+=("${f}")
    fi
  done
  git diff --no-index --color "${files[@]}"
}

_run_delta() {
  _run_git_diff "$@" | delta --paging=never
}

_run_diff-so-fancy() {
  # Use diff-so-fancy for diffing files outside git. See also:
  # https://github.com/so-fancy/diff-so-fancy/issues/220#issuecomment-283244546
  # git diff --no-index --color "$@" | diff-so-fancy
  # As of v1.2.5, diff-so-fancy supports diff output as well:
  # https://github.com/so-fancy/diff-so-fancy/releases/tag/v1.2.5
  diff -u "$@" | diff-so-fancy
}

_run_icdiff() {
  icdiff "$@"
}

_run_diff() {
  diff -u --color=auto "$@"
}

main() {
  for differ in "${_ORDERED_DIFFERS[@]}"; do
    if _command_exists "${differ}"; then
      eval "_run_${differ}" "$@"
      return
    fi
  done
  exit 1
}

main "$@"
