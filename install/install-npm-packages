#!/usr/bin/env python3
import argparse
import json
import os
import subprocess

import installation_util as util

# The node modules will be installed in a directory named node_modules under
# this directory.
# NOTE: `yarn global add` installs packages to ~/.config/yarn/global by default.
LOCAL_MODULES_PARENT_DIR = os.path.expanduser('~/.local/pkg/npm')
XDG_DATA_HOME = os.environ.get('XDG_DATA_HOME',
                               os.path.expandvars('$HOME/.local/share'))


def _log_info(msg: str) -> None:
    print(f'install_npm_packages: {msg}')


def _log_warning(msg: str) -> None:
    print(util.yellow(f'install_npm_packages: {msg}'))


def _install_packages():
    subprocess.run(['yarn', 'install'],
                   cwd=LOCAL_MODULES_PARENT_DIR,
                   check=True)


def _get_npm_config_var(name: str):
    p = subprocess.run(['npm', 'config', 'get', name],
                       check=True,
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
    return p.stdout.strip()


def _upgrade_packages(packages):
    # NOTE(infokiller): This doesn't upgrade package.json with the new versions,
    # see: https://github.com/yarnpkg/yarn/issues/3266
    # Steps:
    # 1. Upgrade using `--latest` to get the latest versions of all packages,
    #    which may upgrade the major version, thus breaking stuff (but I'm
    #    living on the bleeding edge...). Since the `package.json` file is in
    #    the config repo, I should notice any changes before committing them.
    # 2. Upgrade using `--carret` to register the major versions for each
    #    package in `package.json`, so that all my computers use consistent
    #    package versions.
    # subprocess.run(['yarn', 'upgrade', '--latest'],
    #                cwd=LOCAL_MODULES_PARENT_DIR,
    #                check=True)
    # subprocess.run(['yarn', 'upgrade', '--caret'],
    #                cwd=LOCAL_MODULES_PARENT_DIR,
    #                check=True)
    subprocess.run(['yarn', 'add'] + packages + ['--exact'],
                   cwd=LOCAL_MODULES_PARENT_DIR,
                   check=True)


def _link_package_files(package_path, get_binary_install_name=lambda x: x):
    package_spec = os.path.basename(package_path)
    package_metadata_path = os.path.join(package_path, 'package.json')
    with open(package_metadata_path) as f:
        package_metadata = json.loads(f.read())
    package_bins = package_metadata.get('bin', {})
    if isinstance(package_bins, str):
        package_bins = {package_spec: package_bins}
    assert isinstance(package_bins, dict)
    for name, path in package_bins.items():
        install_name = get_binary_install_name(name)
        if install_name is None:
            _log_warning(f'Skipping binary not explicitly listed: {name}')
            continue
        if not install_name:
            _log_info(f'Skipping explicitly disabled binary: {name}')
            continue
        _log_info(f'Installing binary {name} from package {package_spec} '
                  f'as {install_name}')
        util.symlink_relative(os.path.join(package_path, path),
                              os.path.join(util.USER_BIN_DIR, install_name))
    for path in package_metadata.get('man', {}).items():
        name = os.path.basename(path)
        _log_info(f'Installing man page {name} from package {package_path}')
        util.symlink_relative(os.path.join(package_path, path),
                              os.path.join(util.USER_MAN_DIR, name))


# Install pnpm without assuming node is installed. Not really used for now.
# https://pnpm.io/installation
def _install_pnpm_via_script():
    zshrc_path = os.path.expanduser('~/.zshrc')
    # THe pnpm install script modifies .zshrc (and ignores ZDOTDIR).
    zshrc_exists_before = os.path.isfile(zshrc_path)
    subprocess.run('curl -fsSL https://get.pnpm.io/install.sh | sponge | sh',
                   check=True,
                   shell=True)
    zshrc_exists_after = os.path.isfile(zshrc_path)
    if zshrc_exists_after and not zshrc_exists_before:
        os.remove(zshrc_path)
    pnpm_path = os.path.join(XDG_DATA_HOME, 'pnpm/pnpm')
    # print(pnpm_path)
    assert os.path.isfile(pnpm_path)
    util.symlink_relative(pnpm_path, os.path.join(util.USER_BIN_DIR, 'pnpm'))


# https://pnpm.io/installation
def _install_pnpm_via_npm():
    subprocess.run('npm install -g pnpm', check=True, shell=True)
    npm_prefix = _get_npm_config_var('prefix')
    for file in ['pnpm', 'pnpx']:
        path = os.path.join(npm_prefix, 'bin', file)
        util.symlink_relative(path, os.path.join(util.USER_BIN_DIR, file))


def main():
    parser = argparse.ArgumentParser(
        description='Install and/or upgrade config repo npm packages.')
    parser.add_argument('--upgrade',
                        action='store_true',
                        help='Upgrade npm packages to their latest version.')
    args = parser.parse_args()

    util.create_user_dirs()

    _install_pnpm_via_npm()
    _install_packages()
    with open(os.path.join(LOCAL_MODULES_PARENT_DIR, 'package.json')) as f:
        packages_json = json.loads(f.read())
    packages = list(packages_json.get('dependencies', {}).keys())
    if args.upgrade:
        _upgrade_packages(packages)

    explicitly_installed_binaries = packages_json.get(
        'explicitly_installed_binaries', {})
    for package in packages:
        get_binary_install_name = lambda x: x
        if package in explicitly_installed_binaries:
            get_binary_install_name = explicitly_installed_binaries[package].get
        package_path = os.path.join(LOCAL_MODULES_PARENT_DIR, 'node_modules',
                                    package)
        _link_package_files(package_path, get_binary_install_name)


if __name__ == "__main__":
    main()
