#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

_GRAPHICAL_ORDER=(
  pinentry-qt
  pinentry-gnome3
  pinentry-gtk-2
  pinentry-curses
  pinentry-tty
)
# Opening a graphical window using X11 over a network can be slow, so we prefer
# terminal based pinentry programs in this case. There are also cases where
# there is no graphical environment available, like in a linux console.
_TERMINAL_ORDER=(
  _run_pinentry_curses
  _run_pinentry_tty
  pinentry-qt
  pinentry-gnome3
  pinentry-gtk-2
)
PINENTRY_TTY="${TMPDIR:-${XDG_RUNTIME_DIR}/tmp}/pinentry_tty"

# An attempt to fix pinentry-curses so that it uses the tty that the gpg/ssh
# command was invoked from. The default beavior when using git with ssh is to
# use the active tty at the moment pinentry was called, which won't be
# the tty the original ssh command was invoked from if I quickly switch to
# another terminal in tmux. This can mess up my terminal when I'm running
# another program such as vim.
# TODO: Add a gpg wrapper that writes PINENTRY_TTY (right now only ssh does).
_run_pinentry_curses_or_tty() {
  local bin="$1"
  shift
  local args=(--timeout 30)
  local tty
  # TODO: setting ttyname doesn't always work in SSH.
  if tty="$(< "${PINENTRY_TTY}")"; then
    args+=(--ttyname "${tty}")
  fi
  "${bin}" "${args[@]}" "$@"
}

_run_pinentry_curses() {
  _run_pinentry_curses_or_tty pinentry-curses "$@"
}

_run_pinentry_tty() {
  _run_pinentry_curses_or_tty pinentry-tty "$@"
}

_command_exists() {
  command -v -- "$1" &> /dev/null
}

_is_ssh() {
  [[ -n ${SSH_CLIENT-} || -n ${SSH_TTY-} || -n ${SSH_CONNECTION-} ]]
}

main() {
  local programs=()
  # I tried checking that a graphical env is available by checking $DISPLAY but
  # it doesn't work: it always uses _TERMINAL_ORDER.
  # TODO: Fix pinentry in non-graphical mode.
  # if [[ -z "${DISPLAY-}" ]] || _is_ssh; then
  if _is_ssh; then
    programs=("${_TERMINAL_ORDER[@]}")
  else
    programs=("${_GRAPHICAL_ORDER[@]}")
  fi
  for program in "${programs[@]}"; do
    if _command_exists "${program}"; then
      "${program}" "$@"
      exit
    fi
  done
  exit 1
}

main "$@"
